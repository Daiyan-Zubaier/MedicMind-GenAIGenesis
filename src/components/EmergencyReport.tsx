
import React, { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Input } from '@/components/ui/input';
import { FileText, Printer, ArrowLeft, Mic, MicOff } from 'lucide-react';
import { Instruction } from './FirstAidInstructions';
import { startVoiceToText } from '@/lib/speechUtils';

interface EmergencyReportProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  emergency: string;
  instructions: Instruction[];
  completedSteps: number[];
  onBack: () => void;
}

const EmergencyReport: React.FC<EmergencyReportProps> = ({
  open,
  onOpenChange,
  emergency,
  instructions,
  completedSteps,
  onBack
}) => {
  const [notes, setNotes] = useState<string>('');
  const [location, setLocation] = useState<string>('');
  const [additionalInfo, setAdditionalInfo] = useState<string>('');
  const [witnessContacts, setWitnessContacts] = useState<string>('');
  const [previousEvents, setPreviousEvents] = useState<string>('');
  const [activeVoiceField, setActiveVoiceField] = useState<string | null>(null);
  
  const currentDate = new Date().toLocaleString();
  
  // Handle voice to text for different fields
  const handleVoiceToText = (fieldName: string) => {
    // If we're already recording for this field, stop it
    if (activeVoiceField === fieldName) {
      setActiveVoiceField(null);
      return;
    }
    
    // Start voice recording for the selected field
    setActiveVoiceField(fieldName);
    
    const updateField = (text: string) => {
      switch (fieldName) {
        case 'location':
          setLocation(prev => prev + ' ' + text);
          break;
        case 'notes':
          setNotes(prev => prev + ' ' + text);
          break;
        case 'additionalInfo':
          setAdditionalInfo(prev => prev + ' ' + text);
          break;
        case 'witnessContacts':
          setWitnessContacts(prev => prev + ' ' + text);
          break;
        case 'previousEvents':
          setPreviousEvents(prev => prev + ' ' + text);
          break;
      }
    };
    
    const stopRecording = startVoiceToText(
      (text) => {
        updateField(text);
      },
      () => {
        setActiveVoiceField(null);
      }
    );
    
    // After 30 seconds, automatically stop recording
    setTimeout(() => {
      stopRecording();
      setActiveVoiceField(null);
    }, 30000);
  };
  
  const handlePrint = () => {
    // Create a printable version of the report
    const printWindow = window.open('', '_blank');
    if (!printWindow) {
      alert('Please allow pop-ups to print the report');
      return;
    }

    const completedInstructions = instructions.filter(inst => completedSteps.includes(inst.id));
    
    printWindow.document.write(`
      <html>
        <head>
          <title>Emergency Report - ${emergency}</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 20px; line-height: 1.5; }
            h1, h2 { color: #333; }
            .section { margin-bottom: 20px; }
            .steps { margin-left: 20px; }
            .footer { margin-top: 40px; font-size: 12px; color: #666; }
          </style>
        </head>
        <body>
          <h1>Emergency Report</h1>
          <div class="section">
            <h2>Emergency Type</h2>
            <p>${emergency}</p>
          </div>
          <div class="section">
            <h2>Date & Time</h2>
            <p>${currentDate}</p>
          </div>
          <div class="section">
            <h2>Location</h2>
            <p>${location || "(Not specified)"}</p>
          </div>
          <div class="section">
            <h2>Steps Taken</h2>
            <ol class="steps">
              ${completedInstructions.map(inst => `<li>${inst.text}</li>`).join('')}
            </ol>
          </div>
          <div class="section">
            <h2>Witness Contacts</h2>
            <p>${witnessContacts.replace(/\n/g, '<br/>') || "(None provided)"}</p>
          </div>
          <div class="section">
            <h2>Previous Events</h2>
            <p>${previousEvents.replace(/\n/g, '<br/>') || "(None provided)"}</p>
          </div>
          <div class="section">
            <h2>Additional Notes</h2>
            <p>${notes.replace(/\n/g, '<br/>') || "(None provided)"}</p>
          </div>
          <div class="section">
            <h2>Additional Information</h2>
            <p>${additionalInfo.replace(/\n/g, '<br/>') || "(None provided)"}</p>
          </div>
          <div class="footer">
            <p>Report generated by First Aid Guide App on ${currentDate}</p>
            <p>This report is for informational purposes only and does not constitute medical advice.</p>
          </div>
        </body>
      </html>
    `);
    
    printWindow.document.close();
    setTimeout(() => {
      printWindow.print();
    }, 500);
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-3xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <FileText className="h-5 w-5" />
            Emergency Report - {emergency}
          </DialogTitle>
        </DialogHeader>
        
        <div className="space-y-4 my-4">
          <div>
            <h3 className="text-sm font-medium mb-2">Date & Time</h3>
            <p className="text-sm">{currentDate}</p>
          </div>
          
          <div>
            <h3 className="text-sm font-medium mb-2">Location</h3>
            <div className="flex gap-2">
              <Textarea 
                placeholder="Enter location where the emergency occurred" 
                value={location}
                onChange={(e) => setLocation(e.target.value)}
                className="resize-none flex-grow"
              />
              <Button 
                variant={activeVoiceField === 'location' ? 'default' : 'outline'} 
                size="icon"
                onClick={() => handleVoiceToText('location')}
                className={activeVoiceField === 'location' ? 'bg-red-500 hover:bg-red-600' : ''}
              >
                {activeVoiceField === 'location' ? <MicOff className="h-4 w-4" /> : <Mic className="h-4 w-4" />}
              </Button>
            </div>
          </div>
          
          <div>
            <h3 className="text-sm font-medium mb-2">Steps Taken</h3>
            <ul className="text-sm space-y-1 ml-5 list-disc">
              {instructions
                .filter(instruction => completedSteps.includes(instruction.id))
                .map(instruction => (
                  <li key={instruction.id}>{instruction.text}</li>
                ))}
            </ul>
          </div>
          
          <div>
            <h3 className="text-sm font-medium mb-2">Witness Contacts</h3>
            <div className="flex gap-2">
              <Textarea 
                placeholder="Enter contact information for any witnesses" 
                value={witnessContacts}
                onChange={(e) => setWitnessContacts(e.target.value)}
                className="min-h-[100px] flex-grow"
              />
              <Button 
                variant={activeVoiceField === 'witnessContacts' ? 'default' : 'outline'} 
                size="icon"
                onClick={() => handleVoiceToText('witnessContacts')}
                className={activeVoiceField === 'witnessContacts' ? 'bg-red-500 hover:bg-red-600' : ''}
              >
                {activeVoiceField === 'witnessContacts' ? <MicOff className="h-4 w-4" /> : <Mic className="h-4 w-4" />}
              </Button>
            </div>
          </div>
          
          <div>
            <h3 className="text-sm font-medium mb-2">Previous Events</h3>
            <div className="flex gap-2">
              <Textarea 
                placeholder="Describe what happened before the emergency occurred" 
                value={previousEvents}
                onChange={(e) => setPreviousEvents(e.target.value)}
                className="min-h-[100px] flex-grow"
              />
              <Button 
                variant={activeVoiceField === 'previousEvents' ? 'default' : 'outline'} 
                size="icon"
                onClick={() => handleVoiceToText('previousEvents')}
                className={activeVoiceField === 'previousEvents' ? 'bg-red-500 hover:bg-red-600' : ''}
              >
                {activeVoiceField === 'previousEvents' ? <MicOff className="h-4 w-4" /> : <Mic className="h-4 w-4" />}
              </Button>
            </div>
          </div>
          
          <div>
            <h3 className="text-sm font-medium mb-2">Additional Notes</h3>
            <div className="flex gap-2">
              <Textarea 
                placeholder="Enter any additional notes, observations, or outcomes" 
                value={notes}
                onChange={(e) => setNotes(e.target.value)}
                className="min-h-[100px] flex-grow"
              />
              <Button 
                variant={activeVoiceField === 'notes' ? 'default' : 'outline'} 
                size="icon"
                onClick={() => handleVoiceToText('notes')}
                className={activeVoiceField === 'notes' ? 'bg-red-500 hover:bg-red-600' : ''}
              >
                {activeVoiceField === 'notes' ? <MicOff className="h-4 w-4" /> : <Mic className="h-4 w-4" />}
              </Button>
            </div>
          </div>
          
          <div>
            <h3 className="text-sm font-medium mb-2">Additional Information</h3>
            <div className="flex gap-2">
              <Textarea 
                placeholder="Enter any information that might be relevant for insurance or medical follow-up" 
                value={additionalInfo}
                onChange={(e) => setAdditionalInfo(e.target.value)}
                className="min-h-[100px] flex-grow"
              />
              <Button 
                variant={activeVoiceField === 'additionalInfo' ? 'default' : 'outline'} 
                size="icon"
                onClick={() => handleVoiceToText('additionalInfo')}
                className={activeVoiceField === 'additionalInfo' ? 'bg-red-500 hover:bg-red-600' : ''}
              >
                {activeVoiceField === 'additionalInfo' ? <MicOff className="h-4 w-4" /> : <Mic className="h-4 w-4" />}
              </Button>
            </div>
          </div>
        </div>
        
        <DialogFooter className="sm:justify-between flex-wrap gap-2">
          <Button 
            variant="outline" 
            onClick={onBack} 
            className="sm:mt-0"
          >
            <ArrowLeft className="mr-2 h-4 w-4" />
            Back to Instructions
          </Button>
          
          <Button 
            onClick={handlePrint}
          >
            <Printer className="mr-2 h-4 w-4" />
            Print Report
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default EmergencyReport;
